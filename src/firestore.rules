
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document,
    // by comparing their UID to a `userId` field on the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the user is the author of a piece of content.
    function isAuthor() {
      return request.auth.uid == resource.data.authorId;
    }

    // Helper function to check if the user is creating content for themselves.
    function isCreatingAsSelf() {
       return request.auth.uid == request.resource.data.authorId;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if true;
      allow create, update: if isOwner(userId);
      allow delete: if false;
    }
    
    // Posts collection
    match /posts/{postId} {
        allow read: if true;
        allow create: if isAuthenticated() && isCreatingAsSelf();
        allow delete: if isAuthor();
        // Allow author to update everything.
        // Allow any authenticated user to update ONLY the 'likedBy' array for liking.
        allow update: if isAuthor() || 
                       (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy']));
    }

    // Events collection
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated() && isCreatingAsSelf();
      allow delete: if isAuthor();
      // Allow author to update everything.
      // Allow any authenticated user to update ONLY the 'rsvps' array for RSVPing.
      allow update: if isAuthor() ||
                     (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps']));
    }

    // Other content collections
    match /{collection}/{docId} where collection in ['listings', 'jobs', 'offers', 'promoPages'] {
      allow read: if true;
      allow create: if isAuthenticated() && isCreatingAsSelf();
      allow update, delete: if isAuthor();
    }

    // Notifications: Only the recipient can read/update their notifications.
    match /notifications/{notificationId} {
      allow read, update: if isOwner(resource.data.userId);
      allow create, delete: if false; // Created/deleted via server-side logic
    }

    // Reminders: Only the owner can manage their reminders.
    match /reminders/{reminderId} {
      allow read, create, update, delete: if isOwner(resource.data.userId);
    }
  }
}
