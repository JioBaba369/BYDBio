
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user owns the resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to validate file type and size
    function isValidImage() {
      return request.resource.size < 5 * 1024 * 1024 // Max 5 MB
             && request.resource.contentType.matches('image/.*'); // Only allow images
    }

    // Avatars: Users can only upload their own avatar.
    match /avatars/{userId} {
      allow write: if isAuthenticated() && isOwner(userId) && isValidImage();
    }

    // Content Images (Events, Jobs, Listings, etc.)
    // Users can only upload images into their own folder within a content type.
    match /events/{userId}/{eventId}/{fileName} {
      allow write: if isAuthenticated() && isOwner(userId) && isValidImage();
    }

    match /jobs/{userId}/{jobId}/{fileName} {
      allow write: if isAuthenticated() && isOwner(userId) && isValidImage();
    }

    match /listings/{userId}/{listingId}/{fileName} {
      allow write: if isAuthenticated() && isOwner(userId) && isValidImage();
    }

    match /offers/{userId}/{offerId}/{fileName} {
      allow write: if isAuthenticated() && isOwner(userId) && isValidImage();
    }

    match /posts/{userId}/{postId}/{fileName} {
      allow write: if isAuthenticated() && isOwner(userId) && isValidImage();
    }
    
    match /promoPages/{userId}/{promoPageId}/{fileName} {
       allow write: if isAuthenticated() && isOwner(userId) && isValidImage();
    }
    
    // All files are publicly readable by default to allow easy display in the app.
    // If you have private files, you would need more specific read rules.
    match /{allPaths=**} {
      allow read: if true;
    }
  }
}
