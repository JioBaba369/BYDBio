rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can be read by any authenticated user.
    // A user can create their own profile and update it.
    // We also allow a specific rule for updating 'following' and 'subscribers' for the connections feature.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      
      // Allow user to update their own profile, except for the subscribers count which is handled by the rule below
      allow update: if request.auth.uid == userId && !('subscribers' in request.resource.data.diff(resource.data).affectedKeys());
      
      // Allow any authenticated user to increment/decrement subscribers by exactly 1.
      // This is for the follow/unfollow functionality.
      allow update: if request.auth != null
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['subscribers'])
                    && (request.resource.data.subscribers == resource.data.subscribers + 1 || request.resource.data.subscribers == resource.data.subscribers - 1);
    }
    
    // Public content collections can be read by anyone.
    // Create, update, and delete are restricted to the author.
    match /(businesses|listings|jobs|offers)/{docId} {
        allow read: if true;
        allow create: if request.auth.uid == request.resource.data.authorId;
        allow update, delete: if request.auth.uid == resource.data.authorId;
    }

    // Events have special rules for RSVPs.
    match /events/{eventId} {
        allow read: if true;
        allow create, delete: if request.auth.uid == request.resource.data.authorId;
        
        // Author can update their own event
        allow update: if request.auth.uid == resource.data.authorId;
        
        // Any authenticated user can update the rsvps array for themself
        allow update: if request.auth != null 
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps']);
    }

    // Posts have special rules for likes.
    match /posts/{postId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.authorId;
        
        // Author can update their own post
        allow update: if request.auth.uid == resource.data.authorId;
        
        // Any authenticated user can update the likes/likedBy fields
        allow update: if request.auth != null 
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']);
    }

    // Private collections can only be accessed by the user they belong to.
    match /(diaryNotes|reminders)/{docId} {
      allow read, write: if request.auth.uid == resource.data.userId;
    }

    // Notifications can be created by an "actor" for another "userId".
    // Only the receiving "userId" can read or update (e.g., mark as read).
    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.actorId;
      allow delete: if false; // Don't allow client-side deletes
    }
  }
}
