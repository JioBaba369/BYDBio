rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =============================================
    // Helper Functions
    // =============================================

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Check if the viewer is a follower of the author
    function isFollower(authorId) {
        return exists(/databases/$(database)/documents/users/$(authorId)) && request.auth.uid in get(/databases/$(database)/documents/users/$(authorId)).data.following;
    }

    // =============================================
    // Default Deny
    // =============================================
    match /{document=**} {
      allow read, write: if false;
    }

    // =============================================
    // Users Collection Rules
    // =============================================
    match /users/{userId} {
      allow get: if true;
      allow list: if request.query.limit <= 50;

      allow create: if isOwner(userId)
                    && request.resource.data.uid == userId;
      
      allow update: if isOwner(userId)
                     && !(request.resource.data.keys().hasAny(['followerCount', 'postCount']));
    }

    // =============================================
    // Content Collections Rules
    // =============================================
    
    // -- LISTINGS --
    match /listings/{listingId} {
      allow get: if resource.data.status == 'active';
      allow list: if request.query.limit <= 50 && request.query.wheres[0][2] == 'active';
      allow create, update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }

    // -- JOBS --
    match /jobs/{jobId} {
      allow get: if resource.data.status == 'active';
      allow list: if request.query.limit <= 50 && request.query.wheres[0][2] == 'active';
      allow create, update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }

    // -- OFFERS --
    match /offers/{offerId} {
      allow get: if resource.data.status == 'active';
      allow list: if request.query.limit <= 50 && request.query.wheres[0][2] == 'active';
      allow create, update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    // -- PROMO PAGES --
    match /promoPages/{promoPageId} {
      allow get: if resource.data.status == 'active';
      allow list: if request.query.limit <= 50 && request.query.wheres[0][2] == 'active';
      allow create, update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    // -- EVENTS --
    match /events/{eventId} {
      allow get: if resource.data.status == 'active';
      allow list: if request.query.limit <= 50 && request.query.wheres[0][2] == 'active';
      allow create, delete: if isAuthenticated() && isOwner(resource.data.authorId);
      
      // Allow owner to update content, OR any authenticated user to update ONLY the rsvps list.
      allow update: if isAuthenticated() && 
                      (isOwner(resource.data.authorId) || 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps']));
    }

    // -- POSTS --
    match /posts/{postId} {
      allow get: if resource.data.privacy == 'public' || 
                   (resource.data.privacy == 'followers' && (isOwner(resource.data.authorId) || isFollower(resource.data.authorId))) ||
                   (resource.data.privacy == 'me' && isOwner(resource.data.authorId));

      allow list: if request.query.limit <= 50 && 
                     (request.query.wheres[0][2] == 'public' || (isAuthenticated() && request.auth.uid == request.query.wheres[1][2]));

      allow create, delete: if isAuthenticated() && isOwner(resource.data.authorId);
      
      allow update: if isAuthenticated() &&
                       (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy', 'likes']));
    }

    // =============================================
    // Private Collections Rules
    // =============================================
    
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && 
                    (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));
                    
      allow create: if isAuthenticated() && isOwner(request.resource.data.bookerId);
      
      allow delete: if isAuthenticated() && 
                      (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));
    }
  }
}