
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Deny all reads/writes by default
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS
    // Users can read any profile
    // Users can only write to their own profile
    match /users/{userId} {
      allow read: if true;
      allow create, update, delete: if request.auth.uid == userId;
    }
    
    // CONTENT COLLECTIONS (listings, jobs, events, offers, promoPages)
    // - Anyone can read active content.
    // - Only the author can create, update, or delete their own content.
    function isAuthor(resourceId, collectionName) {
      return request.auth.uid == get(/databases/$(database)/documents/$(collectionName)/$(resourceId)).data.authorId;
    }

    match /listings/{listingId} {
      allow read: if resource.data.status == 'active';
      allow create: if request.auth.uid == request.resource.data.authorId;
      allow update, delete: if isAuthor(listingId, 'listings');
    }
    
    match /jobs/{jobId} {
      allow read: if resource.data.status == 'active';
      allow create: if request.auth.uid == request.resource.data.authorId;
      allow update, delete: if isAuthor(jobId, 'jobs');
    }

    match /events/{eventId} {
      allow read: if resource.data.status == 'active';
      allow create: if request.auth.uid == request.resource.data.authorId;
      allow update, delete: if isAuthor(eventId, 'events');
      // Allow any authenticated user to RSVP (update the rsvps array)
      allow update: if request.auth.uid != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps']);
    }

    match /offers/{offerId} {
      allow read: if resource.data.status == 'active';
      allow create: if request.auth.uid == request.resource.data.authorId;
      allow update, delete: if isAuthor(offerId, 'offers');
    }
    
    match /promoPages/{promoPageId} {
      allow read: if resource.data.status == 'active';
      allow create: if request.auth.uid == request.resource.data.authorId;
      allow update, delete: if isAuthor(promoPageId, 'promoPages');
    }
    
    // NOTIFICATIONS
    // Users can only read their own notifications
    // Server-side logic (or other rules) must handle creation
    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.userId;
        allow create: if request.auth.uid != null; // Allow logged-in users to trigger notification creation
    }

    // APPOINTMENTS
    // Only the owner or the booker can access an appointment
    match /appointments/{appointmentId} {
      allow read, delete: if request.auth.uid == resource.data.ownerId || request.auth.uid == resource.data.bookerId;
      allow create: if request.auth.uid == request.resource.data.bookerId;
    }
    
    // ORDERS (Admin only)
    // Only an admin user can read all orders
    match /orders/{orderId} {
        allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email == 'admin@byd.bio';
        allow create: if request.auth.uid != null;
    }
  }
}
