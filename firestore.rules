rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isString(value) {
      return value is string;
    }
    
    function isStringOrNull(value) {
      return value is string || value == null;
    }
    
    function isOptionalString(data, key) {
        return data == null || !has(data) || !(key in data) || data[key] is string;
    }

    function isNumber(value) {
        return value is number;
    }

    function isTimestamp(value) {
        return value is timestamp;
    }
    
    function isBoolean(value) {
      return value is bool;
    }

    function isListOfStrings(list) {
      return list is list && (list.size() == 0 || list[0] is string);
    }
    
    function isValidUserUpdate(data) {
        return isString(data.name) && data.name.size() > 0
            && isString(data.username) && data.username.size() > 2
            && (isStringOrNull(data.bio) || !('bio' in data))
            && (isStringOrNull(data.avatarUrl) || !('avatarUrl' in data))
            && (isListOfStrings(data.hashtags) || !('hashtags' in data))
            && data.keys().hasAny(['name', 'username', 'bio', 'avatarUrl', 'hashtags', 'businessCard', 'links', 'bookingSettings', 'searchableKeywords', 'avatarFallback']);
    }
    
    // Validation for content creation/update
    function isValidContent(data, type) {
        let baseFields = {
            'title': 'string',
            'description': 'string',
            'imageUrl': 'stringOrNull',
            'category': 'string',
            'subCategory': 'optionalString',
            'status': 'string'
        };

        let typeSpecificFields = {
            'listing': {'price': 'string', 'listingType': 'string', 'startDate': 'timestampOrNull', 'endDate': 'timestampOrNull', 'clicks': 'number', 'followerCount': 'number'},
            'job': {'company': 'string', 'location': 'string', 'type': 'string', 'remuneration': 'optionalString', 'postingDate': 'timestamp', 'closingDate': 'timestampOrNull', 'applicants': 'number', 'followerCount': 'number'},
            'event': {'location': 'string', 'startDate': 'timestamp', 'endDate': 'timestampOrNull', 'rsvps': 'list', 'followerCount': 'number', 'itinerary': 'list'},
            'offer': {'startDate': 'timestamp', 'endDate': 'timestampOrNull', 'claims': 'number', 'followerCount': 'number'}
        };
        
        let requiredFields = type in typeSpecificFields ? baseFields.keys() + typeSpecificFields[type].keys() : baseFields.keys();
        
        return data.keys().hasAll(requiredFields);
    }
    
    function contentRules() {
      allow read;
      allow create: if isOwner(request.resource.data.authorId) && isValidContent(request.resource.data, request.path[1]);
      allow update: if isOwner(resource.data.authorId) && isValidContent(request.resource.data, request.path[1]);
      allow delete: if isOwner(resource.data.authorId);
    }

    // USER-RELATED RULES
    match /users/{userId} {
      allow read, list: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && isValidUserUpdate(request.resource.data);
      allow delete: if isOwner(userId);
    }

    // CONTENT-RELATED RULES
    match /listings/{listingId} {
        allow read;
        allow create: if isOwner(request.resource.data.authorId);
        allow update: if isOwner(resource.data.authorId);
        allow delete: if isOwner(resource.data.authorId);
    }
    match /jobs/{jobId} {
        allow read;
        allow create: if isOwner(request.resource.data.authorId);
        allow update: if isOwner(resource.data.authorId);
        allow delete: if isOwner(resource.data.authorId);
    }
    match /events/{eventId} {
        allow read;
        allow create: if isOwner(request.resource.data.authorId);
        allow update: if isOwner(resource.data.authorId) || (isSignedIn() && request.resource.data.rsvps.hasAny([request.auth.uid]));
        allow delete: if isOwner(resource.data.authorId);
    }
    match /offers/{offerId} {
        allow read;
        allow create: if isOwner(request.resource.data.authorId);
        allow update: if isOwner(resource.data.authorId);
        allow delete: if isOwner(resource.data.authorId);
    }
    match /promoPages/{promoId} {
        allow read;
        allow create: if isOwner(request.resource.data.authorId);
        allow update: if isOwner(resource.data.authorId);
        allow delete: if isOwner(resource.data.authorId);
    }
    
    // POST-RELATED RULES
    match /posts/{postId} {
        allow read;
        allow create: if isOwner(request.resource.data.authorId);
        allow update: if isOwner(resource.data.authorId) || (isSignedIn() && request.resource.data.likedBy.hasAny([request.auth.uid])); // For likes
        allow delete: if isOwner(resource.data.authorId);
    }
    
    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isSignedIn();
    }
    
    // APPOINTMENTS
    match /appointments/{appointmentId} {
      allow read, delete: if isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId);
      allow create: if isSignedIn();
    }
  }
}