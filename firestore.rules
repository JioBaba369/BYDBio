rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users: Can read all, can only create/update their own profile
    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId);
      // Allow users to update their own profile. Also allow any authenticated user to
      // update the `following` and `subscribers` fields of another user, which is necessary
      // for the follow/unfollow functionality.
      allow update: if isAuthenticated() && (isOwner(userId) || request.resource.data.diff(resource.data).affectedKeys().hasOnly(['following', 'subscribers']));
    }

    // Posts: Can read all, can only create/delete their own posts
    match /posts/{postId} {
      allow read;
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
      // Allow owner to update/delete, allow any authenticated user to update likes
      allow update: if isAuthenticated() && (isOwner(resource.data.authorId) || request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']));
      allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }

    // Businesses: Can read all, can only create/update/delete their own
    match /businesses/{businessId} {
        allow read;
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
        allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    // Listings: Can read all, can only create/update/delete their own
    match /listings/{listingId} {
      allow read;
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }

    // Jobs: Can read all, can only create/update/delete their own
    match /jobs/{jobId} {
      allow read;
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    // Offers: Can read all, can only create/update/delete their own
    match /offers/{offerId} {
        allow read;
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
        allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }

    // Events: Can read all, can only create/delete their own. Any authenticated user can RSVP.
    match /events/{eventId} {
      allow read;
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
      // Allow owner to update all fields. Allow any authenticated user to update only the `rsvps` array.
      allow update: if isAuthenticated() && (isOwner(resource.data.authorId) || request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps']));
      allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    // Diary Notes: Can only be created, read, updated, and deleted by the owner.
    match /diaryNotes/{noteId} {
        allow read, update, delete: if isAuthenticated() && isOwner(resource.data.userId);
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }

    // Notifications: Can only be created by an authenticated user. Can only be read/updated by the recipient.
    match /notifications/{notificationId} {
      allow create: if isAuthenticated();
      allow read, update: if isAuthenticated() && isOwner(resource.data.userId);
      // No delete for now to preserve history, or can be restricted to owner
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Reminders: Can only be created, read, and updated by the owner.
    match /reminders/{reminderId} {
        allow read, update: if isAuthenticated() && isOwner(resource.data.userId);
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
  }
}
