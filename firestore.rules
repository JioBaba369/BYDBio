rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // By default, deny all reads and writes.
    match /{document=**} {
      allow read, write: if false;
    }

    // Helper function to check if a user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if a user is an admin.
    function isAdmin() {
      return request.auth.token.email == 'admin@byd.bio';
    }

    // Rules for the 'users' collection.
    match /users/{userId} {
      // Anyone can read a user's public profile.
      allow read: if true;
      // Only the user themselves can update their own profile.
      allow update: if isOwner(userId);
      // An authenticated user can create their own user document.
      allow create: if isOwner(userId);
    }
    
    // Generic rules for public content collections.
    function publicContentRules(isPublicField, isPost) {
      return {
        // Read is allowed if the content is marked as public/active.
        // For posts, we also need to check the privacy field.
        "allow read": {
          "if": isPublicField() || (isPost && resource.data.privacy == 'followers' && isAuthenticated() && exists(/databases/$(database)/documents/users/$(resource.data.authorId)) && request.auth.uid in get(/databases/$(database)/documents/users/$(resource.data.authorId)).data.following)
        },
        // Authenticated users can create content.
        "allow create": {
          "if": isAuthenticated() && isOwner(request.resource.data.authorId)
        },
        // Only the owner can update or delete their content.
        "allow update, delete": {
          "if": isOwner(resource.data.authorId)
        }
      }
    }

    // Apply rules to all public content collections.
    match /listings/{listingId} {
      allow read, create, update, delete: if publicContentRules(() => resource.data.status == 'active', false);
    }
    match /jobs/{jobId} {
      allow read, create, update, delete: if publicContentRules(() => resource.data.status == 'active', false);
    }
    match /events/{eventId} {
      allow read, create, update, delete: if publicContentRules(() => resource.data.status == 'active', false);
    }
    match /offers/{offerId} {
      allow read, create, update, delete: if publicContentRules(() => resource.data.status == 'active', false);
    }
    match /promoPages/{promoPageId} {
      allow read, create, update, delete: if publicContentRules(() => resource.data.status == 'active', false);
    }
    match /posts/{postId} {
       allow read, create, update, delete: if publicContentRules(() => resource.data.privacy == 'public', true);
    }
    
    // Rules for user-specific collections.
    match /notifications/{notificationId} {
        // Only the recipient can read their notifications.
        allow read: if isOwner(resource.data.userId);
        // Anyone can create a notification (for contact forms), but only owners can update 'read' status.
        allow create: if true;
        allow update: if isOwner(resource.data.userId);
    }

    match /orders/{orderId} {
      // Only the user who placed the order or an admin can read it.
      allow read: if isOwner(resource.data.userId) || isAdmin();
      // Only authenticated users can create orders for themselves.
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
  }
}
