rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Validates incoming user data on creation
    function isValidUser(data) {
        return data.name is string && data.name.size() < 50 &&
               data.username is string && data.username.size() > 2 && data.username.size() < 30 &&
               (!('bio' in data) || data.bio is string && data.bio.size() <= 160);
    }
    
    // Validates incoming post data on creation
    function isValidPost(data) {
        return data.authorId == request.auth.uid &&
               data.content is string && data.content.size() < 2000;
    }
    
    // Validates incoming event data on creation
    function isValidEvent(data) {
        return data.authorId == request.auth.uid &&
               data.title is string && data.title.size() > 1 && data.title.size() < 101 &&
               data.description is string && data.description.size() > 9 && data.description.size() < 2001 &&
               data.location is string;
    }

    // COLLECTION-SPECIFIC RULES

    // Users collection rules
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId) && isValidUser(request.resource.data);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.userId);
        allow create: if isAuthenticated();
        allow delete: if false; // Deleting notifications is not allowed
    }

    // Posts collection
    match /posts/{postId} {
        allow read: if true;
        allow create: if isAuthenticated() && isValidPost(request.resource.data);
        allow update: if isAuthenticated(); // Liking/commenting is an update
        allow delete: if isOwner(resource.data.authorId);
    }
    
    // Events collection
    match /events/{eventId} {
        allow read: if true;
        allow create: if isAuthenticated() && isValidEvent(request.resource.data);
        allow update: if isAuthenticated(); // RSVPing and owner edits
        allow delete: if isOwner(resource.data.authorId);
    }

    // Listings collection
    match /listings/{listingId} {
        allow read: if true;
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
        allow update: if isOwner(resource.data.authorId);
        allow delete: if isOwner(resource.data.authorId);
    }

    // Jobs collection
    match /jobs/{jobId} {
        allow read: if true;
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
        allow update: if isOwner(resource.data.authorId);
        allow delete: if isOwner(resource.data.authorId);
    }

    // Offers collection
    match /offers/{offerId} {
        allow read: if true;
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
        allow update: if isOwner(resource.data.authorId);
        allow delete: if isOwner(resource.data.authorId);
    }

    // Promo Pages collection
    match /promoPages/{promoId} {
        allow read: if true;
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
        allow update: if isOwner(resource.data.authorId);
        allow delete: if isOwner(resource.data.authorId);
    }
    
    // Reminders collection (if used by a backend function)
    match /reminders/{reminderId} {
        allow read, write: if false; // Should only be accessed by backend/admin
    }
  }
}
