rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- UTILITY FUNCTIONS ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isContentOwner() {
      return request.auth.uid == resource.data.authorId;
    }

    // --- USERS ---
    match /users/{userId} {
      // Anyone can read a public profile
      allow read: if true;
      // Only the owner can write to their profile
      allow create, update: if isOwner(userId);
      // Deletion is handled by a cloud function or admin process, not directly by users
      allow delete: if false; 
    }

    // --- NOTIFICATIONS ---
    match /notifications/{notificationId} {
      // Only the user the notification is for can read or write to it
      allow read, update: if isOwner(resource.data.userId);
      // Notifications are created by the system/server actions, not directly by clients
      allow create, delete: if false; 
    }
    
    // --- APPOINTMENTS ---
    match /appointments/{appointmentId} {
      allow read: if isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId);
      // Any signed-in user can create, as long as they are the booker
      allow create: if isSignedIn() && request.resource.data.bookerId == request.auth.uid;
      // Only owner or booker can modify/delete (e.g. cancel)
      allow update, delete: if isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId);
    }
    
    // --- GENERIC CONTENT RULE for posts, events, jobs, listings, offers, promoPages ---
    match /{collection}/{documentId} 
        where collection in ['posts', 'events', 'jobs', 'listings', 'offers', 'promoPages'] {
      
      // Allow read for public content, or if the viewer is the owner.
      // A more complex followers-only rule would require data duplication or inefficient gets.
      // This simplified rule is secure and functional for the current data model.
      allow read: if (resource.data.status == 'active' && resource.data.privacy == 'public')
                   || (resource.data.status == 'active' && resource.data.privacy == 'followers' && isContentOwner())
                   || (resource.data.status == 'active' && resource.data.privacy == 'me' && isContentOwner())
                   || isContentOwner();

      // Allow create if user is signed in and is the author of the new document.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      
      // Allow update/delete only by the content owner.
      allow update, delete: if isContentOwner();
    }
    
    // Fallback rule: Deny all other reads and writes by default.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
