
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Helper Functions ---
    // Checks if a user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if the user making the request is the owner of a document.
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Checks if a user's profile is being created for the first time.
    function isCreatingUser(userId) {
      return isOwner(userId) && !exists(/databases/$(database)/documents/users/$(userId));
    }
    
    // Checks if a user is updating only their own allowed fields.
    // Disallows changing followerCount, postCount, etc. directly.
    function isUpdatingOwnAllowedFields() {
      let allowedFields = ['name', 'username', 'bio', 'avatarUrl', 'links', 'businessCard', 'notificationSettings', 'fcmTokens', 'searchableKeywords', 'bookingSettings', 'avatarFallback', 'hashtags'];
      return request.resource.data.keys().hasOnly(allowedFields);
    }
    
    // Checks if a user is only updating their 'following' array.
    function isUpdatingFollowing() {
      return request.resource.data.keys().hasOnly(['following']);
    }
    
    // --- Collection Rules ---

    // ** Users Collection **
    // Users can be read by anyone.
    // A user can only be created if they are the authenticated user.
    // A user can only update their own profile, and only specific fields.
    // Deletion of user profiles is disallowed from client-side requests for safety.
    match /users/{userId} {
      allow read: if true;
      allow create: if isCreatingUser(userId);
      allow update: if isOwner(userId) && (isUpdatingOwnAllowedFields() || isUpdatingFollowing());
      allow delete: if false; 
    }

    // ** Posts Collection **
    // Public posts can be read by anyone.
    // Posts can only be created by an authenticated user, as themself.
    // A user can only update their own posts.
    // A user can only delete their own posts.
    match /posts/{postId} {
      allow read: if resource.data.privacy == 'public';
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }

    // ** Content Collections (Listings, Jobs, Events, Offers, PromoPages) **
    // Common rules for all user-generated content types.
    function contentRules(collectionName) {
      match /$(collectionName)/{contentId} {
        allow read: if resource.data.status == 'active';
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
        allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
      }
    }
    
    // Apply the common rules to each content collection.
    {
      contentRules('listings');
      contentRules('jobs');
      contentRules('events');
      contentRules('offers');
      contentRules('promoPages');
    }
    
    // ** Notifications Collection **
    // Users can only read their own notifications.
    // Notifications cannot be created, updated, or deleted directly by clients;
    // this must be handled by server-side logic (e.g., Cloud Functions or Server Actions).
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId);
      allow create, update, delete: if false;
    }
    
    // ** Appointments Collection **
    // Authenticated users can create appointments.
    // The owner of the appointment (the person being booked) can read it.
    // Appointments cannot be updated or deleted from the client for simplicity and safety.
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && isOwner(resource.data.ownerId);
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    // ** Reminders Collection **
    // Reminders are managed server-side and should not be accessible from the client.
    match /reminders/{reminderId} {
        allow read, write: if false;
    }
  }
}
