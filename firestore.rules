rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users:
    // - Anyone can read public user profiles.
    // - Only the authenticated owner can read their own full document (e.g., email, settings).
    // - A user can only create their own profile document.
    // - A user can only update their own profile document.
    match /users/{userId} {
      allow read: if true;
      allow get: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Deletion is handled via server-side logic/functions.
    }

    // Posts:
    // - Anyone can read any post.
    // - Authenticated users can create posts.
    // - Any authenticated user can like/unlike a post.
    // - Only the author can update or delete their own post.
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
      allow update: if isAuthenticated() && (
                    (isOwner(resource.data.authorId) && request.resource.data.authorId == resource.data.authorId) ||
                    (request.resource.data.likes == resource.data.likes + 1 || request.resource.data.likes == resource.data.likes - 1)
                  );
      allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    // Events:
    // - Anyone can read any event.
    // - Authenticated users can create events.
    // - Any authenticated user can RSVP to an event.
    // - Only the author can update or delete their own event.
    match /events/{eventId} {
       allow read: if true;
       allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
       allow update: if isAuthenticated() && (
                    (isOwner(resource.data.authorId) && request.resource.data.authorId == resource.data.authorId) ||
                    !request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps'])
                  );
       allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    // Generic Content Rule for simple collections
    function genericContentRules() {
      return {
        allow read: if true,
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId),
        allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId)
      };
    }

    match /listings/{listingId} {
      allow read: genericContentRules().read;
      allow create: genericContentRules().create;
      allow update: genericContentRules().update;
      allow delete: genericContentRules().delete;
    }

    match /jobs/{jobId} {
      allow read: genericContentRules().read;
      allow create: genericContentRules().create;
      allow update: genericContentRules().update;
      allow delete: genericContentRules().delete;
    }
    
    match /offers/{offerId} {
      allow read: genericContentRules().read;
      allow create: genericContentRules().create;
      allow update: genericContentRules().update;
      allow delete: genericContentRules().delete;
    }
    
    match /promoPages/{promoId} {
      allow read: genericContentRules().read;
      allow create: genericContentRules().create;
      allow update: genericContentRules().update;
      allow delete: genericContentRules().delete;
    }

    // Notifications:
    // - A user can only read or update their own notifications.
    // - Any authenticated user can create a notification (e.g., for following someone).
    match /notifications/{notificationId} {
      allow read, update: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated();
      allow delete: if false; // Deletion should be handled by a cron job/function.
    }
    
    // Reminders are not meant to be accessed by the client.
    match /reminders/{reminderId} {
      allow read, write: if false;
    }
  }
}
