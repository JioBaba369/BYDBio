rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAuthenticated() {
      return request.auth != null;
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      // An owner can update their own profile.
      // Any authenticated user can update *only* the followerCount, which is necessary for the follow/unfollow logic.
      // For a production app, this should ideally be handled by a Cloud Function for better security.
      allow update: if (isAuthenticated() && request.auth.uid == userId) || 
                       (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followerCount']));
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Generic Content Rules
    match /{collection}/{docId} where collection in ['posts', 'listings', 'jobs', 'events', 'offers', 'promoPages'] {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.authorId;
      // Allow owner to update, and allow any authenticated user to update interaction counts/arrays.
      allow update: if isAuthenticated() && (
        (request.auth.uid == resource.data.authorId) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'clicks', 'rsvps', 'likedBy', 'likes', 'claims', 'applicants']))
      );
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.authorId;
    }

    match /notifications/{notificationId} {
      allow read, update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
    }

    match /reminders/{reminderId} {
      allow read, write: if isAuthenticated() && request.auth.uid == reminderId.split('_')[0];
    }
  }
}
