
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    //----------------------------------------------------------------------
    //  Helper Functions
    //----------------------------------------------------------------------

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Function to check if a value is a string and within length constraints
    function isString(value, min, max) {
      return value is string && value.size() >= min && value.size() <= max;
    }

    function isOptionalString(value, min, max) {
      return value == null || isString(value, min, max);
    }
    
    function isOptionalStringOrEmpty(value, min, max) {
      return value == null || value == "" || isString(value, min, max);
    }

    // Function to check if a value is a boolean
    function isBoolean(value) {
      return value is bool;
    }
    
    function isOptionalBoolean(value) {
      return value == null || isBoolean(value);
    }

    // Function to check if a value is a number
    function isNumber(value) {
      return value is number;
    }

    // Function to check if a value is a timestamp
    function isTimestamp(value) {
        return value is timestamp;
    }

    function isOptionalTimestamp(value) {
        return value == null || isTimestamp(value);
    }
    
    function isStringArray(arr) {
        return arr is list && (arr.size() == 0 || arr[0] is string);
    }

    //----------------------------------------------------------------------
    //  Content Validation Functions
    //----------------------------------------------------------------------
    function isValidListing(data) {
        return isString(data.title, 2, 100)
            && isString(data.description, 10, 500)
            && isString(data.price, 1, 100)
            && isString(data.category, 2, 50)
            && isOptionalString(data.subCategory, 1, 50)
            && isOptionalString(data.imageUrl, 0, 500)
            && (data.listingType == 'sale' || data.listingType == 'rental')
            && isOptionalTimestamp(data.startDate)
            && isOptionalTimestamp(data.endDate);
    }

    function isValidJob(data) {
        return isString(data.title, 2, 100)
            && isString(data.company, 2, 100)
            && isString(data.description, 10, 5000)
            && isString(data.location, 2, 100)
            && (data.type == 'Full-time' || data.type == 'Part-time' || data.type == 'Contract' || data.type == 'Internship')
            && isOptionalString(data.category, 1, 50)
            && isOptionalString(data.subCategory, 1, 50)
            && isOptionalString(data.remuneration, 1, 100)
            && isOptionalTimestamp(data.closingDate)
            && isOptionalString(data.imageUrl, 0, 500)
            && isOptionalStringOrEmpty(data.applicationUrl, 10, 500)
            && isOptionalString(data.contactInfo, 0, 1000);
    }

    function isValidEvent(data) {
        return isString(data.title, 2, 100)
            && isString(data.description, 10, 2000)
            && isString(data.location, 2, 100)
            && isTimestamp(data.startDate)
            && isOptionalTimestamp(data.endDate)
            && isOptionalString(data.subTitle, 0, 150)
            && isOptionalString(data.category, 0, 50)
            && isOptionalString(data.subCategory, 0, 50)
            && isOptionalString(data.imageUrl, 0, 500)
            && isOptionalString(data.couponCode, 0, 50)
            && isOptionalStringOrEmpty(data.ctaLink, 0, 500)
            && (data.itinerary is list || data.itinerary == null);
    }

    function isValidOffer(data) {
        return isString(data.title, 2, 100)
            && isString(data.description, 10, 500)
            && isString(data.category, 2, 50)
            && isOptionalString(data.subCategory, 1, 50)
            && isTimestamp(data.startDate)
            && isOptionalTimestamp(data.endDate)
            && isOptionalString(data.imageUrl, 0, 500)
            && isOptionalString(data.couponCode, 0, 50)
            && isOptionalStringOrEmpty(data.ctaLink, 0, 500);
    }

    function isValidPromoPage(data) {
        return isString(data.name, 2, 100)
            && isString(data.description, 10, 500)
            && isString(data.email, 5, 100)
            && isOptionalString(data.category, 1, 50)
            && isOptionalString(data.subCategory, 1, 50)
            && isOptionalString(data.phone, 0, 50)
            && isOptionalStringOrEmpty(data.website, 0, 500)
            && isOptionalString(data.address, 0, 200)
            && isOptionalString(data.imageUrl, 0, 500)
            && isOptionalString(data.logoUrl, 0, 500);
    }

    //----------------------------------------------------------------------
    //  Collection Rules
    //----------------------------------------------------------------------
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId);
      allow list: if isSignedIn();
    }

    match /notifications/{notificationId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if true; // Allows system/other users to create notifications
    }

    match /posts/{postId} {
        allow read: if resource.data.privacy == 'public' 
                    || (resource.data.privacy == 'followers' && isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/users/$(resource.data.authorId)).data.followers)
                    || (isSignedIn() && isOwner(resource.data.authorId));
        allow create: if isSignedIn() && isOwner(request.resource.data.authorId);
        allow update: if isSignedIn() && (
                        // Owner can edit their post
                        isOwner(resource.data.authorId)
                        // Any signed in user can like/unlike
                        || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']))
                      );
        allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }
    
    match /appointments/{appointmentId} {
        allow read: if isSignedIn() && (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));
        allow create: if isSignedIn() && isOwner(request.resource.data.bookerId) && request.resource.data.bookerId != request.resource.data.ownerId;
        allow delete: if isSignedIn() && (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));
    }
    
    // Generic Content Rules
    function contentReadRules() {
        return resource.data.status == 'active' || (isSignedIn() && isOwner(resource.data.authorId));
    }
    
    function contentWriteRules(validationFunction) {
        let data = request.resource.data;
        return isSignedIn() && isOwner(data.authorId) && validationFunction(data);
    }

    match /listings/{listingId} {
        allow read: if contentReadRules();
        allow create: if contentWriteRules(isValidListing);
        allow update: if isSignedIn() && isOwner(resource.data.authorId) && isValidListing(request.resource.data);
        allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }
    
    match /jobs/{jobId} {
        allow read: if contentReadRules();
        allow create: if contentWriteRules(isValidJob);
        allow update: if isSignedIn() && isOwner(resource.data.authorId) && isValidJob(request.resource.data);
        allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    match /events/{eventId} {
        allow read: if contentReadRules();
        allow create: if contentWriteRules(isValidEvent);
        allow update: if isSignedIn() && (
                        (isOwner(resource.data.authorId) && isValidEvent(request.resource.data))
                        // Any signed in user can rsvp/un-rsvp
                        || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps']))
                    );
        allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    match /offers/{offerId} {
        allow read: if contentReadRules();
        allow create: if contentWriteRules(isValidOffer);
        allow update: if isSignedIn() && isOwner(resource.data.authorId) && isValidOffer(request.resource.data);
        allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    match /promoPages/{promoPageId} {
        allow read: if contentReadRules();
        allow create: if contentWriteRules(isValidPromoPage);
        allow update: if isSignedIn() && isOwner(resource.data.authorId) && isValidPromoPage(request.resource.data);
        allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }
  }
}

    