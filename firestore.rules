rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- UTILITY FUNCTIONS ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- USERS ---
    match /users/{userId} {
      // Anyone can read a public profile
      allow read: if true;
      // Only the owner can write to their profile
      allow write: if isOwner(userId);
    }

    // --- LIKES (as a subcollection of posts) ---
    // This is a more scalable approach if likes need to store more data
    match /posts/{postId}/likes/{userId} {
      allow read: if true;
      allow create, delete: if isOwner(userId);
    }

    // --- NOTIFICATIONS ---
    match /notifications/{notificationId} {
      // Only the user the notification is for can read or write to it
      allow read, write: if isOwner(resource.data.userId);
    }
    
    // --- APPOINTMENTS ---
    match /appointments/{appointmentId} {
      allow read: if isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId);
      allow create: if isSignedIn(); // Any signed-in user can create
      allow update, delete: if isOwner(resource.data.ownerId); // Only owner can modify/delete
    }

    // --- GENERIC CONTENT RULE ---
    function isContentOwner(resource) {
      return request.auth.uid == resource.data.authorId;
    }

    // --- DYNAMIC CONTENT COLLECTIONS ---
    // This single rule applies to posts, events, jobs, listings, offers, promoPages
    match /{collection}/{documentId} {
      allow read: if resource.data.status == 'active' 
                   || (resource.data.privacy == 'public')
                   || (resource.data.privacy == 'followers' && isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/users/$(resource.data.authorId)).data.followers)
                   || isOwner(resource.data.authorId);

      allow create: if isSignedIn() && request.data.authorId == request.auth.uid;
      
      allow update, delete: if isContentOwner(resource) || isContentOwner(request.resource);
    }
  }
}
