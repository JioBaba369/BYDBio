
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================================================
    // Helper Functions
    // =================================================================

    // Is the user authenticated?
    function isSignedIn() {
      return request.auth != null;
    }

    // Is the user the owner of the resource?
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Is the incoming data for a create operation owned by the user?
    function isCreatingOwned(userIdKey) {
        return isSignedIn() && request.resource.data[userIdKey] == request.auth.uid;
    }
    
    // Does the incoming data have all the required fields for creation?
    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }
    
    // Is the user updating only the allowed fields?
    function isUpdatingAllowedFields(allowedFields) {
      return request.resource.data.keys().hasOnly(allowedFields);
    }

    // =================================================================
    // Users Collection
    // =================================================================
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow get: if true;
      
      // Users can list other users (for search/connections)
      allow list: if isSignedIn();

      // A user can create their own profile document
      allow create: if isOwner(userId);

      // A user can only update their own profile
      allow update: if isOwner(userId);
      
      // A user can only delete their own profile
      allow delete: if isOwner(userId);
    }
    
    // =================================================================
    // Posts Collection
    // =================================================================
    match /posts/{postId} {
      // Allow reading posts based on their privacy setting
      allow get: if resource.data.privacy == 'public' || 
                    (resource.data.privacy == 'followers' && isSignedIn() && resource.data.authorId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.following) ||
                    (resource.data.privacy == 'me' && isSignedIn() && isOwner(resource.data.authorId));
      
      // Allow listing public posts
      allow list: if isSignedIn();
      
      // Any authenticated user can create a post
      allow create: if isCreatingOwned('authorId');
      
      // Only the author can update or delete their post
      allow update, delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    // =================================================================
    // Generic Content Collections (Events, Jobs, Listings, Offers, PromoPages)
    // =================================================================
    match /{collection}/{docId} {
      // Anyone can view any specific content item
      allow get: if true;
      
      // Anyone can list active content
      allow list: if true;

      // Authenticated users can create content they own
      allow create: if isCreatingOwned('authorId');

      // Only the author can update or delete their content
      allow update, delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    // =================================================================
    // Notifications Collection
    // =================================================================
    match /notifications/{notificationId} {
        // A user can only access their own notifications
        allow read, write, delete: if isSignedIn() && isOwner(resource.data.userId);
        
        // A user can only create notifications for themselves (e.g. contact form)
        // or other server-side processes can create them for the user
        allow create: if request.auth == null || isOwner(request.resource.data.userId);
    }
    
    // =================================================================
    // Appointments Collection
    // =================================================================
    match /appointments/{appointmentId} {
        // Only the owner of the appointment (the person being booked) or the booker can view it.
        allow get: if isSignedIn() && (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));

        // Authenticated users can create appointments
        allow create: if isSignedIn();
        
        // Only the owner or booker can update/delete (e.g., cancel)
        allow update, delete: if isSignedIn() && (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));
    }
    
  }
}
