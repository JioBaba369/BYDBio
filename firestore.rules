
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthor(doc) {
      return request.auth.uid == doc.authorId;
    }

    function isOnlyChanging(fields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
    }

    // User Profiles
    match /users/{userId} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Posts
    match /posts/{postId} {
      allow read;
      allow create: if request.auth != null;
      // Author can edit/delete their post.
      allow update, delete: if request.auth != null && isAuthor(resource.data);
      // Any authenticated user can like/unlike (which only changes these two fields).
      allow update: if request.auth != null && isOnlyChanging(['likes', 'likedBy']);
    }

    // Public Content: Listings, Jobs, Offers, Promo Pages
    match /{collection}/{docId}
    where collection in ['listings', 'jobs', 'offers', 'promoPages'] {
      allow read;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && isAuthor(resource.data);
    }

    // Events - Special update rule for RSVPs
    match /events/{eventId} {
      allow read;
      allow create: if request.auth != null;
      allow delete: if request.auth != null && isAuthor(resource.data);
      // Author can update anything.
      // Any logged-in user can update ONLY the rsvps list.
      allow update: if request.auth != null &&
                      (isAuthor(resource.data) || isOnlyChanging(['rsvps']));
    }
    
    // Reminders
    match /reminders/{reminderId} {
        allow write: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Notifications
    match /notifications/{notificationId} {
        allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}
