rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Users Collection
    match /users/{userId} {
      // Anyone can read public-facing user data.
      allow read: if true;
      
      // Only the owner can create their own document.
      allow create: if isOwner(userId);
      
      // Only the owner can update their profile, and they cannot change their followerCount or email.
      allow update: if isOwner(userId)
                    && request.resource.data.followerCount == resource.data.followerCount;
    }
    
    // Generic Rules for Content Collections
    function canCreateContent() {
      return isAuthenticated()
             && isOwner(request.resource.data.authorId)
             && request.resource.data.createdAt == request.time;
    }
    
    function canUpdateContent(authorId) {
        return isAuthenticated() && isOwner(authorId);
    }
    
    function canDeleteContent(authorId) {
        return isAuthenticated() && isOwner(authorId);
    }

    // Posts Collection
    match /posts/{postId} {
      allow read: if true;
      allow create: if canCreateContent();
      allow delete: if canDeleteContent(resource.data.authorId);
      // Allow updates by owner, and allow any authenticated user to like/unlike
      allow update: if canUpdateContent(resource.data.authorId) ||
                     (isAuthenticated() && request.resource.data.likedBy == resource.data.likedBy.diff(request.auth.uid));
    }
    
    // Events Collection
    match /events/{eventId} {
        allow read: if resource.data.status == 'active';
        allow create: if canCreateContent();
        allow delete: if canDeleteContent(resource.data.authorId);
        // Allow updates by owner, and allow any authenticated user to rsvp
        allow update: if canUpdateContent(resource.data.authorId) ||
                       (isAuthenticated() && request.resource.data.rsvps == resource.data.rsvps.diff(request.auth.uid));
    }
    
    // Other content collections with similar rules
    match /jobs/{jobId} {
        allow read: if resource.data.status == 'active';
        allow create: if canCreateContent();
        allow update: if canUpdateContent(resource.data.authorId);
        allow delete: if canDeleteContent(resource.data.authorId);
    }
    
    match /listings/{listingId} {
        allow read: if resource.data.status == 'active';
        allow create: if canCreateContent();
        allow update: if canUpdateContent(resource.data.authorId);
        allow delete: if canDeleteContent(resource.data.authorId);
    }
    
    match /offers/{offerId} {
        allow read: if resource.data.status == 'active';
        allow create: if canCreateContent();
        allow update: if canUpdateContent(resource.data.authorId);
        allow delete: if canDeleteContent(resource.data.authorId);
    }
    
    match /promoPages/{promoId} {
        allow read: if resource.data.status == 'active';
        allow create: if canCreateContent();
        allow update: if canUpdateContent(resource.data.authorId);
        allow delete: if canDeleteContent(resource.data.authorId);
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
        // A user can only access their own notifications
        allow read, update, delete: if isOwner(resource.data.userId);
        // Creation should be handled by server-side logic (e.g., Cloud Functions) with admin privileges, not by clients.
        allow create: if false; 
    }
  }
}
