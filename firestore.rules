rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- UTILITY FUNCTIONS ---
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isSignedIn() {
      return request.auth != null;
    }
    
    function isString(val) { return val is string; }
    function isStringOrNull(val) { return val == null || val is string; }
    function isBool(val) { return val is bool; }
    function isNumber(val) { return val is number; }
    function isTimestamp(val) { return val is timestamp; }
    function isTimestampOrNull(val) { return val == null || val is timestamp; }
    function isList(val) { return val is list; }
    function isMap(val) { return val is map; }
    function isMapOrNull(val) { return val == null || val is map; }

    function isValidUserWrite(data) {
      return isString(data.name) && data.name.size() <= 50
        && isString(data.username) && data.username.size() >= 3 && data.username.size() <= 30
        && (isStringOrNull(data.bio) && (data.bio == null || data.bio.size() <= 160))
        && isStringOrNull(data.avatarUrl)
        && (isList(data.hashtags) && data.hashtags.size() <= 10)
        && (isList(data.links) && data.links.size() <= 10)
        && isMapOrNull(data.businessCard)
        && isMapOrNull(data.notificationSettings)
        && isMapOrNull(data.subscriptions)
        && isMapOrNull(data.bookingSettings);
    }
    
    function hasRequiredKeys(data, keys) {
      return keys.hasAll(data.keys());
    }
    
    function hasOnlyAllowedKeys(data, allowedKeys) {
      return data.keys().hasOnly(allowedKeys);
    }

    // --- COLLECTION RULES ---

    match /users/{userId} {
      allow read;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && isValidUserWrite(request.resource.data);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    match /posts/{postId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    match /events/{eventId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    match /jobs/{jobId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }
    
    match /listings/{listingId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }
    
    match /offers/{offerId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }
    
    match /promoPages/{promoPageId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    match /notifications/{notificationId} {
      allow read, update: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn();
    }
    
    match /appointments/{appointmentId} {
      allow read: if isSignedIn() && (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));
      allow create: if isSignedIn();
      allow delete: if isSignedIn() && (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));
    }
  }
}