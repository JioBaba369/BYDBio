
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // Checks if the requesting user is the author of a document.
    function isAuthor() {
      return request.auth != null && request.auth.uid == resource.data.authorId;
    }
    
    // Checks if the requesting user is the owner of a document (based on userId field).
    function isOwner() {
      return request.auth != null && request.auth.uid == resource.data.userId;
    }

    // --- Collection Rules ---

    // USERS: Anyone can read a user profile. Only the user can modify their own profile.
    match /users/{userId} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // POSTS: Anyone can read posts. Only the author can create/delete. Any logged-in user can like a post.
    match /posts/{postId} {
      allow read;
      allow create, delete: if isAuthor();
      allow update: if isAuthor() || (request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']));
    }

    // EVENTS: Anyone can read events. Only the author can create/delete/fully-update. Any logged-in user can RSVP.
    match /events/{eventId} {
      allow read;
      allow create, delete: if isAuthor();
      allow update: if isAuthor() || (request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps']));
    }

    // PUBLIC CONTENT (Listings, Jobs, Offers, Businesses): Readable by all, writable only by the author.
    match /listings/{listingId} {
      allow read;
      allow write: if isAuthor();
    }
    
    match /jobs/{jobId} {
      allow read;
      allow write: if isAuthor();
    }
    
    match /offers/{offerId} {
      allow read;
      allow write: if isAuthor();
    }

    match /businesses/{businessId} {
      allow read;
      allow write: if isAuthor();
    }

    // NOTIFICATIONS: A user can only read/update their own notifications. Any authenticated user can create one for someone else.
    match /notifications/{notificationId} {
      allow read, update: if isOwner();
      allow create: if request.auth != null;
    }

    // DIARY & REMINDERS (Private): Only the owner can read or write their own notes and reminders.
    match /diaryNotes/{noteId} {
      allow read, write: if isOwner();
    }
    
    match /reminders/{reminderId} {
      allow read, write: if isOwner();
    }
  }
}
