rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // By default, deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can be read by anyone, but only written to by the authenticated user
    match /users/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false; // Deletion is a privileged operation
    }
    
    // Notifications can only be accessed by the user they belong to
    match /notifications/{notificationId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null; 
    }

    // Helper function to check ownership
    function isOwner() {
      return request.auth.uid == resource.data.authorId;
    }
    
    // Helper function to check ownership on create
    function isCreatingOwnContent() {
      return request.auth.uid == request.resource.data.authorId;
    }
    
    // Public content collections (events, jobs, etc.)
    match /{collectionId}/{docId} where collectionId in ['events', 'jobs', 'listings', 'offers', 'promoPages'] {
      // Anyone can read active content
      allow read: if resource.data.status == 'active';
      // Authenticated users can create content for themselves
      allow create: if request.auth != null && isCreatingOwnContent();
      // Only the author can update or delete their content
      allow update, delete: if request.auth != null && isOwner();
    }
    
    // Posts collection with specific privacy rules
    match /posts/{postId} {
      allow create: if request.auth != null && isCreatingOwnContent();
      allow update, delete: if request.auth != null && isOwner();
      // Read access depends on the post's privacy setting
      allow read: if resource.data.privacy == 'public'
                  || (request.auth != null && isOwner())
                  || (resource.data.privacy == 'followers' && request.auth != null && resource.data.authorId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.following);
    }
  }
}
