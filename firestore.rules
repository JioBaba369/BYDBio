
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =============================================
    // Helper Functions
    // =============================================
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Check if the viewer is a follower of the author
    function isFollower(authorId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.following.hasAny([authorId]);
    }

    // Check if a document is being created
    function isCreating() {
      return resource == null;
    }

    // =============================================
    // Generic Content Validation Functions
    // =============================================

    function hasBaseFields(data) {
      return data.authorId == request.auth.uid &&
             data.createdAt == request.time &&
             data.status == 'active' &&
             data.views == 0 &&
             data.followerCount == 0;
    }

    function cannotUpdateProtectedFields() {
      return request.resource.data.authorId == resource.data.authorId &&
             request.resource.data.createdAt == resource.data.createdAt;
    }
    
    function validateListing(data) {
        return data.title is string && data.title.size() <= 100 &&
               data.description is string && data.description.size() <= 500 &&
               data.price is string &&
               data.category is string;
    }
    
    function validateJob(data) {
        return data.title is string && data.title.size() <= 100 &&
               data.company is string &&
               data.description is string && data.description.size() <= 5000 &&
               data.location is string &&
               data.type in ['Full-time', 'Part-time', 'Contract', 'Internship'];
    }

    function validateEvent(data) {
        return data.title is string && data.title.size() <= 100 &&
               data.description is string && data.description.size() <= 2000 &&
               data.location is string &&
               data.startDate is timestamp;
    }

    function validateOffer(data) {
        return data.title is string && data.title.size() <= 100 &&
               data.description is string && data.description.size() <= 500 &&
               data.category is string &&
               data.startDate is timestamp;
    }
    
    function validatePromoPage(data) {
        return data.name is string && data.name.size() <= 100 &&
               data.description is string && data.description.size() <= 500 &&
               data.email is string;
    }
    
    // =============================================
    // Default Deny
    // =============================================
    match /{path=**} {
      allow read, write: if false;
    }
    
    // =============================================
    // Collection Rules
    // =============================================
    match /users/{userId} {
      allow list: if request.query.limit <= 50;
      allow get: if true;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) &&
                       !('followerCount' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('postCount' in request.resource.data.diff(resource.data).affectedKeys());
    }

    match /posts/{postId} {
      allow list: if request.query.limit <= 50;
      allow get: if resource.data.privacy == 'public' || 
                    (resource.data.privacy == 'followers' && (isOwner(resource.data.authorId) || isFollower(resource.data.authorId))) ||
                    (resource.data.privacy == 'me' && isOwner(resource.data.authorId));
      allow create: if isOwner(request.resource.data.authorId);
      allow delete: if isOwner(resource.data.authorId);
      allow update: if isAuthenticated() && isOwner(resource.data.authorId) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasAny(['likedBy', 'likes', 'repostCount']);
    }

    match /listings/{listingId} {
      allow list: if request.query.limit <= 50;
      allow get: if resource.data.status == 'active';
      allow create: if isOwner(request.resource.data.authorId) && validateListing(request.resource.data) && hasBaseFields(request.resource.data);
      allow update: if isOwner(resource.data.authorId) && validateListing(request.resource.data) && cannotUpdateProtectedFields();
      allow delete: if isOwner(resource.data.authorId);
    }
    
    match /jobs/{jobId} {
      allow list: if request.query.limit <= 50;
      allow get: if resource.data.status == 'active';
      allow create: if isOwner(request.resource.data.authorId) && validateJob(request.resource.data) && hasBaseFields(request.resource.data);
      allow update: if isOwner(resource.data.authorId) && validateJob(request.resource.data) && cannotUpdateProtectedFields();
      allow delete: if isOwner(resource.data.authorId);
    }
    
    match /events/{eventId} {
      allow list: if request.query.limit <= 50;
      allow get: if resource.data.status == 'active';
      allow create: if isOwner(request.resource.data.authorId) && validateEvent(request.resource.data) && hasBaseFields(request.resource.data);
      allow update: if (isOwner(resource.data.authorId) && validateEvent(request.resource.data) && cannotUpdateProtectedFields()) ||
                       (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps']));
      allow delete: if isOwner(resource.data.authorId);
    }
    
    match /offers/{offerId} {
      allow list: if request.query.limit <= 50;
      allow get: if resource.data.status == 'active';
      allow create: if isOwner(request.resource.data.authorId) && validateOffer(request.resource.data) && hasBaseFields(request.resource.data);
      allow update: if isOwner(resource.data.authorId) && validateOffer(request.resource.data) && cannotUpdateProtectedFields();
      allow delete: if isOwner(resource.data.authorId);
    }
    
    match /promoPages/{promoPageId} {
      allow list: if request.query.limit <= 50;
      allow get: if resource.data.status == 'active';
      allow create: if isOwner(request.resource.data.authorId) && validatePromoPage(request.resource.data) && hasBaseFields(request.resource.data);
      allow update: if isOwner(resource.data.authorId) && validatePromoPage(request.resource.data) && cannotUpdateProtectedFields();
      allow delete: if isOwner(resource.data.authorId);
    }
    
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));
      allow create: if isAuthenticated() && isOwner(request.resource.data.bookerId);
      allow delete: if isAuthenticated() && (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));
    }
  }
}
