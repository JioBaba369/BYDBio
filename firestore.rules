rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isString(value) {
      return value is string;
    }

    function isStringOrNull(value) {
      return value is string || value == null;
    }
    
    function isNumber(value) {
      return value is number;
    }

    function isInt(value) {
      return value is int;
    }
    
    function isBool(value) {
      return value is bool;
    }

    function isTimestamp(value) {
        return value is timestamp;
    }
    
    function isTimestampOrNull(value) {
        return value is timestamp || value == null;
    }

    function isArray(value) {
      return value is list;
    }
    
    function isMap(value) {
      return value is map;
    }
    
    function hasOnly(keys) {
        return request.resource.data.keys().hasOnly(keys);
    }

    // --- Data Validation Functions ---

    function isValidUser(data) {
        return data.uid == request.auth.uid
            && isString(data.name) && data.name.size() > 0
            && isString(data.username) && data.username.size() >= 3
            && isStringOrNull(data.email)
            && isString(data.avatarUrl)
            && isString(data.avatarFallback)
            && isString(data.bio)
            && isArray(data.hashtags)
            && isArray(data.following)
            && isInt(data.followerCount) && data.followerCount >= 0
            && isInt(data.postCount) && data.postCount >= 0
            && isArray(data.links)
            && isMap(data.businessCard)
            && isMap(data.notificationSettings)
            && isMap(data.subscriptions)
            && isMap(data.bookingSettings)
            && isArray(data.searchableKeywords);
    }

    function isValidContent(data, requiredFields, optionalFields) {
        let allKeys = requiredFields.concat(optionalFields);
        return data.authorId == request.auth.uid
            && data.status == 'active'
            && isTimestamp(data.createdAt)
            && hasOnly(allKeys);
    }
    
    function isValidListing(data) {
        let required = ['authorId', 'title', 'description', 'price', 'category', 'listingType', 'status', 'createdAt', 'views', 'clicks', 'followerCount', 'searchableKeywords'];
        let optional = ['subCategory', 'imageUrl', 'startDate', 'endDate'];
        return isValidContent(data, required, optional)
            && isString(data.title) && data.title.size() > 0
            && isString(data.description) && data.description.size() > 0
            && isString(data.price)
            && isString(data.category);
    }
    
    function isValidJob(data) {
        let required = ['authorId', 'title', 'company', 'description', 'location', 'type', 'status', 'createdAt', 'postingDate', 'views', 'applicants', 'followerCount', 'searchableKeywords'];
        let optional = ['subCategory', 'remuneration', 'closingDate', 'imageUrl', 'applicationUrl', 'contactInfo'];
        return isValidContent(data, required, optional)
            && isString(data.title) && data.title.size() > 0
            && isString(data.company) && data.company.size() > 0
            && isString(data.description) && data.description.size() > 0
            && isString(data.location) && data.location.size() > 0;
    }

    function isValidEvent(data) {
        let required = ['authorId', 'title', 'description', 'location', 'startDate', 'status', 'createdAt', 'views', 'rsvps', 'followerCount', 'searchableKeywords', 'itinerary'];
        let optional = ['subTitle', 'category', 'subCategory', 'imageUrl', 'couponCode', 'ctaLink', 'endDate'];
        return isValidContent(data, required, optional)
            && isString(data.title) && data.title.size() > 0
            && isString(data.description) && data.description.size() > 0
            && isString(data.location) && data.location.size() > 0
            && isTimestamp(data.startDate);
    }

    function isValidOffer(data) {
        let required = ['authorId', 'title', 'description', 'category', 'startDate', 'status', 'createdAt', 'views', 'claims', 'followerCount', 'searchableKeywords'];
        let optional = ['subCategory', 'endDate', 'imageUrl', 'couponCode', 'ctaLink'];
        return isValidContent(data, required, optional)
            && isString(data.title) && data.title.size() > 0
            && isString(data.description) && data.description.size() > 0
            && isString(data.category) && data.category.size() > 0
            && isTimestamp(data.startDate);
    }

    function isValidPromoPage(data) {
        let required = ['authorId', 'name', 'description', 'email', 'status', 'createdAt', 'views', 'clicks', 'followerCount', 'searchableKeywords'];
        let optional = ['category', 'subCategory', 'phone', 'website', 'address', 'imageUrl', 'logoUrl'];
        return isValidContent(data, required, optional)
            && isString(data.name) && data.name.size() > 0
            && isString(data.description) && data.description.size() > 0
            && isString(data.email) && data.email.size() > 0;
    }


    // --- Collection Rules ---

    match /users/{userId} {
      allow read;
      allow create: if isSignedIn() && isValidUser(request.resource.data);
      allow update: if isSignedIn() && isOwner(userId) && isValidUser(request.resource.data);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    match /posts/{postId} {
        allow read: if resource.data.privacy == 'public' || (isSignedIn() && resource.data.authorId == request.auth.uid) || (isSignedIn() && resource.data.privacy == 'followers' && request.auth.uid in get(/databases/$(database)/documents/users/$(resource.data.authorId)).data.following);
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isOwner(resource.data.authorId);
        allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }
    
    match /listings/{listingId} {
      allow read: if resource.data.status == 'active';
      allow create: if isSignedIn() && isValidListing(request.resource.data);
      allow update(listing): if isSignedIn() && isOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    match /jobs/{jobId} {
      allow read: if resource.data.status == 'active';
      allow create: if isSignedIn() && isValidJob(request.resource.data);
      allow update: if isSignedIn() && isOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }
    
    match /events/{eventId} {
      allow read: if resource.data.status == 'active';
      allow create: if isSignedIn() && isValidEvent(request.resource.data);
      allow update: if isSignedIn() && (isOwner(resource.data.authorId) || request.auth.uid in resource.data.rsvps);
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    match /offers/{offerId} {
      allow read: if resource.data.status == 'active';
      allow create: if isSignedIn() && isValidOffer(request.resource.data);
      allow update: if isSignedIn() && isOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    match /promoPages/{promoId} {
      allow read: if resource.data.status == 'active';
      allow create: if isSignedIn() && isValidPromoPage(request.resource.data);
      allow update: if isSignedIn() && isOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    match /notifications/{notificationId} {
      allow read, update: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() || request.resource.data.type == 'contact_form_submission';
    }
    
    match /appointments/{appointmentId} {
      allow read, delete: if isSignedIn() && (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));
      allow create: if isSignedIn();
    }
  }
}
