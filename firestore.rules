rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(docData) {
      return request.auth.uid == docData.authorId;
    }

    function isTogglingLike() {
      let isLiking = request.resource.data.likedBy == resource.data.likedBy.concat([request.auth.uid])
                     && request.resource.data.likes == resource.data.likes + 1;
      let isUnliking = resource.data.likedBy == request.resource.data.likedBy.concat([request.auth.uid])
                       && request.resource.data.likes == resource.data.likes - 1;
      // Ensure no other fields are being modified
      let onlyAllowedFieldsModified = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']);

      return onlyAllowedFieldsModified && (isLiking || isUnliking);
    }
    
    function isTogglingRsvp() {
        let isRsvping = request.resource.data.rsvps == resource.data.rsvps.concat([request.auth.uid]);
        let isUnRsvping = resource.data.rsvps == request.resource.data.rsvps.concat([request.auth.uid]);
        let onlyRsvpFieldModified = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps']);

        return onlyRsvpFieldModified && (isRsvping || isUnRsvping);
    }

    // Collection Rules
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }

    match /posts/{postId} {
      allow read: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data);
      allow update: if isSignedIn() && (isOwner(resource.data) || isTogglingLike());
      allow delete: if isSignedIn() && isOwner(resource.data);
    }
    
    match /events/{eventId} {
      allow read: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data);
      allow update: if isSignedIn() && (isOwner(resource.data) || isTogglingRsvp());
      allow delete: if isSignedIn() && isOwner(resource.data);
    }

    match /businesses/{businessId} {
        allow read: if true;
        allow create: if isSignedIn() && isOwner(request.resource.data);
        allow update: if isSignedIn() && isOwner(resource.data);
        allow delete: if isSignedIn() && isOwner(resource.data);
    }

    match /listings/{listingId} {
        allow read: if true;
        allow create: if isSignedIn() && isOwner(request.resource.data);
        allow update: if isSignedIn() && isOwner(resource.data);
        allow delete: if isSignedIn() && isOwner(resource.data);
    }
    
    match /jobs/{jobId} {
        allow read: if true;
        allow create: if isSignedIn() && isOwner(request.resource.data);
        allow update: if isSignedIn() && isOwner(resource.data);
        allow delete: if isSignedIn() && isOwner(resource.data);
    }

    match /offers/{offerId} {
        allow read: if true;
        allow create: if isSignedIn() && isOwner(request.resource.data);
        allow update: if isSignedIn() && isOwner(resource.data);
        allow delete: if isSignedIn() && isOwner(resource.data);
    }

    match /diaryNotes/{noteId} {
      allow read, write: if isSignedIn() && request.auth.uid == resource.data.userId;
    }
  }
}
