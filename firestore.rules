
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can be read by anyone, but only updated by the owner.
    match /users/{userId} {
      allow read: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
    }

    // Generic rule for simple content collections
    match /{collection}/{docId} where collection in ['listings', 'jobs', 'offers', 'businesses'] {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    // Events can be read by anyone.
    // RSVPing requires special update handling.
    match /events/{eventId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
      
      // Allow owner to update everything.
      // Allow any signed-in user to update only the 'rsvps' field.
      allow update: if isSignedIn() && (
        isOwner(resource.data.authorId) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps']))
      );
    }
    
    // Posts can be read by any signed-in user.
    // Liking requires special update handling.
    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);

      // Allow owner to update everything.
      // Allow any signed-in user to update only the 'likes' and 'likedBy' fields.
      allow update: if isSignedIn() && (
        isOwner(resource.data.authorId) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']))
      );
    }

    // Diary notes are private to the user.
    match /diaryNotes/{noteId} {
        // noteId is formatted as "userId_eventId"
        allow read, write: if isSignedIn() && isOwner(noteId.split('_')[0]);
    }
  }
}
