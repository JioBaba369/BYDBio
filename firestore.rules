
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Default: Deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection
    match /users/{userId} {
      // Anyone can read a user's public profile data
      allow get: if true;
      // Only the owner can update or delete their own document
      allow update, delete: if isOwner(userId);
      // A user can create their own document
      allow create: if isOwner(userId);
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
        // Only the recipient can read, update or delete their notifications
        allow read, update, delete: if isSignedIn() && isOwner(resource.data.userId);
        // Any signed-in user can create a notification (e.g., by following someone)
        // The createNotification function on the backend handles security logic.
        allow create: if isSignedIn();
    }
    
    // Appointments Collection
    match /appointments/{appointmentId} {
        // Only involved parties (booker or owner) can read
        allow read: if isSignedIn() && (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));
        // Only the booker can create an appointment
        allow create: if isSignedIn() && isOwner(request.resource.data.bookerId);
        // Only the involved parties can update or delete
        allow update, delete: if isSignedIn() && (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));
    }

    // Generic rules for all public-facing content collections
    function contentRules(collectionName) {
      match /databases/{database}/documents {
        match /$(collectionName)/{docId} {
          // Anyone can read a single active document
          allow get: if resource.data.status == 'active';
          // Allow listing of active documents for public pages like 'Explore'
          allow list: if request.query.limit <= 50; // Add some query protection
          // Only the owner can create, update, or delete their own content
          allow create: if isSignedIn() && isOwner(request.resource.data.authorId);
          allow update, delete: if isSignedIn() && isOwner(resource.data.authorId);
        }
      }
    }
    
    // Apply content rules to each collection
    // Note: 'list' is now allowed, which fixes the Explore page permissions.
    match /listings/{listingId} {
      allow read, write: if false; // Deny by default
      allow get, list, create, update, delete: if contentRules('listings');
    }
    match /jobs/{jobId} {
      allow read, write: if false;
      allow get, list, create, update, delete: if contentRules('jobs');
    }
    match /events/{eventId} {
      allow read, write: if false;
      allow get, list, create, update, delete: if contentRules('events');
      // Allow any signed-in user to update the 'rsvps' array
      allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps']);
    }
    match /offers/{offerId} {
      allow read, write: if false;
      allow get, list, create, update, delete: if contentRules('offers');
    }
    match /promoPages/{promoId} {
      allow read, write: if false;
      allow get, list, create, update, delete: if contentRules('promoPages');
    }

    // Posts Collection
    match /posts/{postId} {
        // Allow read based on post privacy
        allow get: if 
          (resource.data.privacy == 'public') ||
          (resource.data.privacy == 'followers' && isSignedIn() && exists(/databases/$(database)/documents/users/$(resource.data.authorId)) && request.auth.uid in get(/databases/$(database)/documents/users/$(resource.data.authorId)).data.followers) ||
          (resource.data.privacy == 'me' && isSignedIn() && isOwner(resource.data.authorId));

        // Allow list for public posts only for discovery feeds.
        allow list: if request.resource.data.privacy == 'public';

        // Creation, updates, and deletion are restricted to the owner.
        allow create: if isSignedIn() && isOwner(request.resource.data.authorId);
        allow update, delete: if isSignedIn() && isOwner(resource.data.authorId);

        // Allow any signed-in user to like a post
        allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']);
    }
  }
}
