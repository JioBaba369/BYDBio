
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =============================================
    // Helper Functions
    // =============================================
    
    // Check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Check data types
    function isString(value) {
      return value is string;
    }
    
    function isStringOrNull(value) {
      return value is string || value == null;
    }
    
    function isNumber() {
      return request.resource.data.price is number;
    }
    
    function isTimestamp(value) {
      return value is timestamp;
    }

    function isTimestampOrNull(value) {
      return value is timestamp || value == null;
    }

    function isListOfStrings(list) {
      return list is list && (list.size() == 0 || list[0] is string);
    }
    
    // Check if the viewer is a follower of the author
    function isFollower(authorId) {
        return exists(/databases/$(database)/documents/users/$(userId)) && request.auth.uid in get(/databases/$(database)/documents/users/$(userId)).data.following;
    }

    // =============================================
    // Validation Functions
    // =============================================
    
    function validateUser() {
      let data = request.resource.data;
      return isString(data.uid) && data.uid == request.auth.uid
          && isString(data.name) && data.name.size() > 0
          && isString(data.username) && data.username.size() > 2;
          // Other user fields can be validated here
    }
    
    function validateListing() {
        let data = request.resource.data;
        return isString(data.title) && data.title.size() > 1 && data.title.size() < 101
            && isString(data.description) && data.description.size() > 9 && data.description.size() < 501
            && isString(data.price)
            && isString(data.category) && data.category.size() > 1
            && (data.status == 'active' || data.status == 'archived')
            && isTimestampOrNull(data.startDate)
            && isTimestampOrNull(data.endDate);
    }

    function validateJob() {
        let data = request.resource.data;
        return isString(data.title) && data.title.size() > 1 && data.title.size() < 101
            && isString(data.company) && data.company.size() > 1
            && isString(data.description) && data.description.size() > 9 && data.description.size() < 5001
            && isString(data.location) && data.location.size() > 1
            && isString(data.type) && ['Full-time', 'Part-time', 'Contract', 'Internship'].hasAny([data.type])
            && (data.status == 'active' || data.status == 'archived')
            && isTimestampOrNull(data.closingDate);
    }
    
    function validateEvent() {
        let data = request.resource.data;
        return isString(data.title) && data.title.size() > 1 && data.title.size() < 101
            && isString(data.description) && data.description.size() > 9 && data.description.size() < 2001
            && isString(data.location) && data.location.size() > 1
            && isTimestamp(data.startDate)
            && isTimestampOrNull(data.endDate)
            && (data.status == 'active' || data.status == 'archived');
    }

    function validateOffer() {
        let data = request.resource.data;
        return isString(data.title) && data.title.size() > 1 && data.title.size() < 101
            && isString(data.description) && data.description.size() > 9 && data.description.size() < 501
            && isString(data.category) && data.category.size() > 1
            && isTimestamp(data.startDate)
            && isTimestampOrNull(data.endDate)
            && (data.status == 'active' || data.status == 'archived');
    }

    function validatePromoPage() {
        let data = request.resource.data;
        return isString(data.name) && data.name.size() > 1 && data.name.size() < 101
            && isString(data.description) && data.description.size() > 9 && data.description.size() < 501
            && isString(data.email) && data.email.matches('.*@.*')
            && (data.status == 'active' || data.status == 'archived');
    }

    function validatePost() {
      let data = request.resource.data;
      return isString(data.content) && data.content.size() <= 2000
          && isStringOrNull(data.imageUrl)
          && (data.privacy == 'public' || data.privacy == 'followers' || data.privacy == 'me');
    }

    // =============================================
    // Default Deny
    // =============================================
    match /{document=**} {
      allow read, write: if false;
    }
    
    // =============================================
    // Users Collection Rules
    // =============================================
    match /users/{userId} {
      allow read: if true;
      allow list: if request.query.limit <= 50;
      allow create: if isOwner(userId) && validateUser();
      allow update: if isOwner(userId)
                     && request.resource.data.followerCount == resource.data.followerCount
                     && request.resource.data.postCount == resource.data.postCount
                     && request.resource.data.email == resource.data.email;
    }

    // =============================================
    // Content Collections Rules
    // =============================================
    match /listings/{listingId} {
        allow get: if resource.data.status == 'active';
        allow list: if request.query.limit <= 50 && request.query.filters.size() > 0 && request.query.filters[0][0] == 'status' && request.query.filters[0][2] == 'active';
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId) && validateListing();
        allow update: if isAuthenticated() && isOwner(resource.data.authorId) && validateListing();
        allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    match /jobs/{jobId} {
        allow get: if resource.data.status == 'active';
        allow list: if request.query.limit <= 50 && request.query.filters.size() > 0 && request.query.filters[0][0] == 'status' && request.query.filters[0][2] == 'active';
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId) && validateJob();
        allow update: if isAuthenticated() && isOwner(resource.data.authorId) && validateJob();
        allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    match /events/{eventId} {
        allow get: if resource.data.status == 'active';
        allow list: if request.query.limit <= 50 && request.query.filters.size() > 0 && request.query.filters[0][0] == 'status' && request.query.filters[0][2] == 'active';
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId) && validateEvent();
        allow update: if isAuthenticated() && 
                       ( (isOwner(resource.data.authorId) && validateEvent()) || 
                         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps'])) );
        allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    match /offers/{offerId} {
        allow get: if resource.data.status == 'active';
        allow list: if request.query.limit <= 50 && request.query.filters.size() > 0 && request.query.filters[0][0] == 'status' && request.query.filters[0][2] == 'active';
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId) && validateOffer();
        allow update: if isAuthenticated() && isOwner(resource.data.authorId) && validateOffer();
        allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    match /promoPages/{pageId} {
        allow get: if resource.data.status == 'active';
        allow list: if request.query.limit <= 50 && request.query.filters.size() > 0 && request.query.filters[0][0] == 'status' && request.query.filters[0][2] == 'active';
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId) && validatePromoPage();
        allow update: if isAuthenticated() && isOwner(resource.data.authorId) && validatePromoPage();
        allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    match /posts/{postId} {
        allow get: if resource.data.privacy == 'public' || (isAuthenticated() && (isOwner(resource.data.authorId) || isFollower(resource.data.authorId)));
        allow list: if request.query.limit <= 50 && request.query.filters.size() > 0 && request.query.filters[0][0] == 'privacy' && request.query.filters[0][2] == 'public';
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId) && validatePost();
        allow update: if isAuthenticated() && isOwner(resource.data.authorId) || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy', 'likes']));
        allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }

    // =============================================
    // Private Collections Rules
    // =============================================
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    match /appointments/{appointmentId} {
      allow read, delete: if isAuthenticated() && (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));
      allow create: if isAuthenticated() && isOwner(request.resource.data.bookerId);
    }
  }
}
