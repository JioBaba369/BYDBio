rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isOwner(uid) {
      return request.auth.uid == uid;
    }
    
    function isAuthed() {
      return request.auth != null;
    }

    match /users/{userId} {
      allow read: if true;
      
      // Allow a user to create their own doc.
      allow create: if isOwner(userId);

      // Allow a user to update their own doc, but not their followerCount.
      // Other users can update followerCount (via increment).
      allow update: if isOwner(userId) && !('followerCount' in request.resource.data) || 
                      (isAuthed() && request.resource.data.followerCount == resource.data.followerCount + 1) ||
                      (isAuthed() && request.resource.data.followerCount == resource.data.followerCount - 1);
      
      allow delete: if false; // Deletion should be a privileged operation
    }

    match /posts/{postId} {
      // Readable if public, or if owner is reading.
      allow read: if resource.data.privacy == 'public' || (isAuthed() && isOwner(resource.data.authorId));

      allow create: if isAuthed() && isOwner(request.resource.data.authorId);
      
      // Allow owner to update. Also allow anyone to update 'likes' and 'likedBy' for the like feature.
      allow update: if isAuthed() && 
          (isOwner(resource.data.authorId)) ||
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']));

      allow delete: if isAuthed() && isOwner(resource.data.authorId);
    }
    
    function genericContentRules(collection) {
      match /$(collection)/{docId} {
          allow read: if resource.data.status == 'active';
          allow create: if isAuthed() && isOwner(request.resource.data.authorId);
          allow delete: if isAuthed() && isOwner(resource.data.authorId);
          
          // Allow owner to update anything. Allow others to update engagement stats.
          allow update: if isAuthed() && 
            (isOwner(resource.data.authorId) ||
             request.resource.data.diff(resource.data).affectedKeys().hasAny(['views', 'clicks', 'rsvps', 'applicants', 'claims', 'followerCount']));
      }
    }
    
    call genericContentRules('listings');
    call genericContentRules('jobs');
    call genericContentRules('events');
    call genericContentRules('offers');
    call genericContentRules('promoPages');
    
    match /notifications/{notificationId} {
      allow read, update: if isAuthed() && isOwner(resource.data.userId);
      allow create: if isAuthed(); // Actions from other users can create notifications
      allow delete: if false;
    }
  }
}
