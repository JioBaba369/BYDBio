rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection
    match /users/{userId} {
      allow list, read: if true; // Anyone can list/read user profiles
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    // Public content collections
    function isOwner(resourceId) {
      return request.auth != null && request.auth.uid == get(/databases/$(database)/documents/$(resource.collection)/$(resourceId)).data.authorId;
    }

    match /listings/{listingId} {
      allow read: if get(/databases/$(database)/documents/listings/$(listingId)).data.status == 'active';
      allow list: if request.query.get("status") == "active";
      allow create, update, delete: if isOwner(listingId);
    }
    match /jobs/{jobId} {
      allow read: if get(/databases/$(database)/documents/jobs/$(jobId)).data.status == 'active';
      allow list: if request.query.get("status") == "active";
      allow create, update, delete: if isOwner(jobId);
    }
    match /events/{eventId} {
      allow read: if get(/databases/$(database)/documents/events/$(eventId)).data.status == 'active';
      allow list: if request.query.get("status") == "active";
      allow create, update, delete: if isOwner(eventId);
    }
    match /offers/{offerId} {
      allow read: if get(/databases/$(database)/documents/offers/$(offerId)).data.status == 'active';
      allow list: if request.query.get("status") == "active";
      allow create, update, delete: if isOwner(offerId);
    }
    match /promoPages/{promoId} {
      allow read: if get(/databases/$(database)/documents/promoPages/$(promoId)).data.status == 'active';
      allow list: if request.query.get("status") == "active";
      allow create, update, delete: if isOwner(promoId);
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if resource.data.privacy == 'public' || 
                   (resource.data.privacy == 'followers' && isSignedIn() && isFollower(resource.data.authorId)) ||
                   (resource.data.privacy == 'me' && isOwner(postId));
      allow list: if request.query.get("privacy") == "public";
      allow create, delete: if isOwner(postId);
      allow update: if isOwner(postId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy', 'likes']); // Only allow liking
    }

    // Private/Authenticated Collections
    function isSignedIn() {
      return request.auth != null;
    }
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper to check if the requesting user is a follower of another user.
    function isFollower(authorId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.following.hasAny([authorId]);
    }

    match /notifications/{notificationId} {
      allow read, write: if isUser(get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId);
    }

    match /appointments/{appointmentId} {
      allow read, create, delete: if isSignedIn();
    }
  }
}