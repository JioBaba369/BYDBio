
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =============================================
    //                Helper Functions
    // =============================================
    
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isNewDoc() {
      return !exists(path);
    }

    function isExistingDoc() {
      return exists(path);
    }

    function isAuthor() {
      return request.auth.uid == request.resource.data.authorId;
    }
    
    function wasAuthor() {
      return request.auth.uid == resource.data.authorId;
    }

    // =============================================
    //                 Collections
    // =============================================

    // User Profiles
    match /users/{userId} {
      // Anyone can view a user's public profile
      allow get: if true;
      
      // Only the owner can update or delete their own profile. Creation is handled at sign-up.
      allow write: if isOwner(userId);
      
      // Authenticated users can list users (for search/discovery)
      allow list: if isSignedIn();
    }
    
    // Notifications
    match /notifications/{notificationId} {
      // Only the recipient can read, update, or delete their notifications
      allow read, update, delete: if isOwner(resource.data.userId);
      
      // Anyone signed in can create a notification (e.g., by following, liking)
      allow create: if isSignedIn();
    }
    
    // Appointments
    match /appointments/{appointmentId} {
      allow read, write: if isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId);
      allow create: if isSignedIn();
    }

    // Reminders
    match /reminders/{reminderId} {
      allow read, write, delete: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn();
    }
    
    // Generic Content Rules
    function canReadContent() {
      return resource.data.status == 'active';
    }
    
    function canCreateContent() {
      return isSignedIn() && isAuthor();
    }
    
    function canUpdateContent() {
      return isSignedIn() && wasAuthor();
    }
    
    function canDeleteContent() {
      return isSignedIn() && wasAuthor();
    }
    
    // Listings
    match /listings/{listingId} {
      allow get: if canReadContent();
      allow list: if isSignedIn();
      allow create: if canCreateContent();
      allow update: if canUpdateContent();
      allow delete: if canDeleteContent();
    }
    
    // Jobs
    match /jobs/{jobId} {
      allow get: if canReadContent();
      allow list: if isSignedIn();
      allow create: if canCreateContent();
      allow update: if canUpdateContent();
      allow delete: if canDeleteContent();
    }
    
    // Events
    match /events/{eventId} {
      allow get: if canReadContent();
      allow list: if isSignedIn();
      allow create: if canCreateContent();
      allow update: if canUpdateContent();
      allow delete: if canDeleteContent();
    }
    
    // Offers
    match /offers/{offerId} {
      allow get: if canReadContent();
      allow list: if isSignedIn();
      allow create: if canCreateContent();
      allow update: if canUpdateContent();
      allow delete: if canDeleteContent();
    }

    // Promo Pages
    match /promoPages/{pageId} {
      allow get: if canReadContent();
      allow list: if isSignedIn();
      allow create: if canCreateContent();
      allow update: if canUpdateContent();
      allow delete: if canDeleteContent();
    }

    // Posts
    match /posts/{postId} {
      // Allow read if public, or if signed in and the viewer is the author or a follower of the author.
      allow get: if resource.data.privacy == 'public' 
                  || (isSignedIn() && (
                      isOwner(resource.data.authorId) || 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.following.hasAny([resource.data.authorId])
                    )
                  );

      allow list: if isSignedIn();
      allow create: if canCreateContent();
      allow update: if canUpdateContent(); // For liking
      allow delete: if canDeleteContent();
    }
  }
}
