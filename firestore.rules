
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // By default, deny all access.
    match /{document=**} {
      allow read, write: if false;
    }

    // --- USERS ---
    // Users collection contains public and private data.
    match /users/{userId} {
      // Anyone can read a user's public profile information.
      allow read: if true;
      
      // A user can create their own profile upon sign up.
      allow create: if request.auth != null && request.auth.uid == userId;

      // A user can only update their own profile.
      // Disallow updating followerCount or postCount directly.
      allow update: if request.auth != null && request.auth.uid == userId
                    && !('followerCount' in request.resource.data)
                    && !('postCount' in request.resource.data);
      
      // A user can delete their own profile.
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // --- POSTS ---
    // Posts can be public, for followers only, or private.
    match /posts/{postId} {
      // Read access logic:
      // - Public posts are readable by anyone.
      // - Private posts are readable only by the author.
      // - Follower-only posts are readable by the author and their followers.
      allow read: if resource.data.privacy == 'public'
                  || (request.auth != null && request.auth.uid == resource.data.authorId)
                  || (resource.data.privacy == 'followers' && isSignedIn() && isFollowing(resource.data.authorId));
                  
      // A user can create a post for themselves.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.authorId;

      // Only the author can update their post.
      allow update: if isSignedIn() && request.auth.uid == resource.data.authorId;

      // Only the author can delete their post.
      allow delete: if isSignedIn() && request.auth.uid == resource.data.authorId;
    }
    
    // --- GENERIC CONTENT (Events, Jobs, Listings, Offers, PromoPages) ---
    function canReadPublicContent() {
      return resource.data.status == 'active';
    }
    
    function isOwner() {
      return request.auth != null && request.auth.uid == resource.data.authorId;
    }

    match /events/{eventId} {
      allow read: if canReadPublicContent();
      allow create, update, delete: if isOwner();
    }
    
    match /jobs/{jobId} {
      allow read: if canReadPublicContent();
      allow create, update, delete: if isOwner();
    }
    
    match /listings/{listingId} {
      allow read: if canReadPublicContent();
      allow create, update, delete: if isOwner();
    }
    
    match /offers/{offerId} {
      allow read: if canReadPublicContent();
      allow create, update, delete: if isOwner();
    }
    
    match /promoPages/{pageId} {
      allow read: if canReadPublicContent();
      allow create, update, delete: if isOwner();
    }
    
    // --- NOTIFICATIONS & APPOINTMENTS ---
    // Only the recipient can read their own notifications/appointments.
    match /notifications/{notificationId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      // Creation is handled by backend functions.
      allow create: if false; 
    }
    
    match /appointments/{appointmentId} {
       allow read, create: if request.auth != null; // Booker or Owner can read/create.
       allow update, delete: if request.auth != null && request.auth.uid == resource.data.ownerId;
    }
    
    // --- HELPER FUNCTIONS ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isFollowing(authorId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.following.hasAny([authorId]);
    }
  }
}
