
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    // Users can be read by anyone, but only the authenticated user can create/modify their own document.
    match /users/{userId} {
      allow read: if true;
      allow create, update: if isAuthenticated() && request.auth.uid == userId;
      // Generally, users shouldn't delete their own record directly, handle this via a Cloud Function.
      allow delete: if false;
    }

    // Generic function to check if the authenticated user is the author of a document.
    // To be used for `update` and `delete` where `resource.data` exists.
    function isAuthor() {
      return isAuthenticated() && request.auth.uid == resource.data.authorId;
    }

    // Generic function to check if the authenticated user is creating a document for themselves.
    // To be used for `create` where `request.resource.data` is used.
    function isCreatingForSelf() {
    	return isAuthenticated() && request.auth.uid == request.resource.data.authorId;
    }

    match /businesses/{businessId} {
      allow read: if true;
      allow create: if isCreatingForSelf();
      allow update, delete: if isAuthor();
    }

    match /listings/{listingId} {
      allow read: if true;
      allow create: if isCreatingForSelf();
      allow update, delete: if isAuthor();
    }

    match /offers/{offerId} {
      allow read: if true;
      allow create: if isCreatingForSelf();
      allow update, delete: if isAuthor();
    }

    match /jobs/{jobId} {
      allow read: if true;
      allow create: if isCreatingForSelf();
      allow update, delete: if isAuthor();
    }

    // Events: Anyone can read.
    // RSVPing (updating 'rsvps' array) only requires authentication.
    match /events/{eventId} {
      allow read: if true;
      allow create: if isCreatingForSelf();
      allow delete: if isAuthor();
      allow update: if isAuthenticated() && (
          isAuthor() ||
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps'])
      );
    }

    // Posts: Readable by anyone.
    // Liking (updating 'likedBy' and 'likes') requires authentication.
    match /posts/{postId} {
        allow read: if true;
        allow create: if isCreatingForSelf();
        allow delete: if isAuthor();
        allow update: if isAuthenticated() && (
          isAuthor() ||
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy', 'likes'])
        );
    }

    // Diary Notes: Only accessible by the owner.
    // The document ID is composite {userId}_{eventId}
    function isDiaryNoteOwner(noteId) {
    	return isAuthenticated() && request.auth.uid == noteId.split('_')[0];
    }
    match /diaryNotes/{noteId} {
      allow read, write: if isDiaryNoteOwner(noteId);
    }
  }
}
