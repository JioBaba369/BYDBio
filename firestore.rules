rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users collection rules
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow read;
      // Only the authenticated owner can write to their own profile
      allow write: if isAuthenticated() && isOwner(userId);
    }
    
    // Content collections (posts, listings, jobs, events, offers, businesses)
    match /{collectionId}/{documentId} 
      where collectionId in ['posts', 'listings', 'jobs', 'events', 'offers', 'businesses'] {
      
      // Anyone can read any content document
      allow read;
      
      // Only authenticated users can create documents
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);

      // Only the original author can update or delete their own documents
      allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
        // Only the recipient of the notification can read it
        allow read: if isAuthenticated() && isOwner(resource.data.userId);
        
        // Notifications are created by the system/backend, but we can allow
        // authenticated users to create them for actions like 'liking'
        allow create: if isAuthenticated();
        
        // Only the recipient can mark their own notification as read (update)
        allow update: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Reminders collection rules
    match /reminders/{reminderId} {
      // A user can read their own reminders.
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      
      // A user can create or update their own reminders. `setDoc` with `merge: true`
      // on the client can trigger either a create or an update operation.
      // This rule ensures the user can only write reminders for themselves.
      allow write: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
  }
}
