
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && isOwner(userId);
      allow delete: if isUserAuthenticated() && isOwner(userId);
      allow update: if (isUserAuthenticated() && isOwner(userId)) ||
                       (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followerCount']));
    }

    match /posts/{postId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && isOwner(request.resource.data.authorId);
      allow delete: if isUserAuthenticated() && isOwner(resource.data.authorId);
      allow update: if (isUserAuthenticated() && isOwner(resource.data.authorId)) ||
                       (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']));
    }

    match /events/{eventId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && isOwner(request.resource.data.authorId);
      allow delete: if isUserAuthenticated() && isOwner(resource.data.authorId);
      allow update: if (isUserAuthenticated() && isOwner(resource.data.authorId)) ||
                       (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps']));
    }

    match /listings/{listingId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && isOwner(request.resource.data.authorId);
      allow update, delete: if isUserAuthenticated() && isOwner(resource.data.authorId);
    }

    match /businesses/{businessId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && isOwner(request.resource.data.authorId);
      allow update, delete: if isUserAuthenticated() && isOwner(resource.data.authorId);
    }

    match /jobs/{jobId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && isOwner(request.resource.data.authorId);
      allow update, delete: if isUserAuthenticated() && isOwner(resource.data.authorId);
    }

    match /offers/{offerId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && isOwner(request.resource.data.authorId);
      allow update, delete: if isUserAuthenticated() && isOwner(resource.data.authorId);
    }

    match /notifications/{notificationId} {
      allow create: if isUserAuthenticated();
      allow read, update, delete: if isUserAuthenticated() && isOwner(resource.data.userId);
    }

    match /diaryNotes/{diaryNoteId} {
      allow read, write: if isUserAuthenticated() && isOwner(resource.data.userId);
    }

    match /reminders/{reminderId} {
      allow read, write: if isUserAuthenticated() && isOwner(resource.data.userId);
    }
  }
}
