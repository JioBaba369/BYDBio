
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    // --- COLLECTION RULES ---

    // USER PROFILES
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      // A user can update their own profile.
      // Other authenticated users can only update the followerCount by +/- 1.
      allow update: if isOwner(userId) || 
                       (isUserAuthenticated() && 
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followerCount']) &&
                        (request.resource.data.followerCount == resource.data.followerCount + 1 || request.resource.data.followerCount == resource.data.followerCount - 1)
                       );
      allow delete: if isOwner(userId); // Deletion should ideally be handled by a Cloud Function for cascading deletes
    }

    // POSTS (Status Updates)
    match /posts/{postId} {
      allow read: if true;
      allow create: if isOwner(request.resource.data.authorId);
      allow delete: if isOwner(resource.data.authorId);
      // Author can update any field. Other users can only update 'likes' and 'likedBy'.
      allow update: if isOwner(resource.data.authorId) ||
                       (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']));
    }

    // EVENTS
    match /events/{eventId} {
      allow read: if true;
      allow create: if isOwner(request.resource.data.authorId);
      allow delete: if isOwner(resource.data.authorId);
      // Author can update any field. Other users can only update 'rsvps'.
      allow update: if isOwner(resource.data.authorId) ||
                       (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps']));
    }
    
    // GENERIC PUBLIC CONTENT
    // Covers: listings, jobs, offers, businesses
    match /{collection}/{docId} where collection in ['listings', 'jobs', 'offers', 'businesses'] {
      allow read: if true;
      allow create: if isOwner(request.resource.data.authorId);
      allow update, delete: if isOwner(resource.data.authorId);
    }
    
    // MESSAGES
    match /messages/{messageId} {
      allow create: if true; // Anyone can send a message via the contact form
      // Only the recipient can read their messages.
      // This rule works for the query in the app because the query itself filters for documents that would pass this rule.
      allow read, update: if isOwner(resource.data.recipientId);
      allow delete: if isOwner(resource.data.recipientId);
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow create: if isUserAuthenticated();
      // Only the recipient can manage their notifications.
      allow read, update, delete: if isOwner(resource.data.userId);
    }
    
    // DIARY NOTES
    match /diaryNotes/{diaryNoteId} {
      // A user can only create and manage their own diary notes.
      allow read, write: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // REMINDERS
    match /reminders/{reminderId} {
      // A user can only create and manage their own reminders.
      allow read, write: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }
  }
}
