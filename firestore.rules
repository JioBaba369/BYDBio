
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =============================================
    // Helper Functions
    // =============================================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isGettingPublicData() {
      return request.query.limit <= 50;
    }

    function isFollower(authorId) {
        return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && authorId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.following;
    }

    function isAuthorOf(doc) {
      return request.auth.uid == doc.authorId;
    }

    // =============================================
    // Default Deny
    // =============================================
    match /{document=**} {
      allow read, write: if false;
    }
    
    // =============================================
    // Users Collection Rules
    // =============================================
    match /users/{userId} {
      allow get: if true;
      allow list: if isGettingPublicData();
      
      allow create: if isOwner(userId)
                    && request.resource.data.uid == userId;
      
      allow update: if isOwner(userId)
                     && !(request.resource.data.followerCount != resource.data.followerCount);
    }

    // =============================================
    // Content Collections Rules
    // =============================================

    match /listings/{listingId} {
      allow get: if resource.data.status == 'active';
      allow list: if isGettingPublicData();
      allow create: if isAuthorOf(request.resource.data);
      allow update, delete: if isAuthorOf(resource.data);
    }
    
    match /jobs/{jobId} {
      allow get: if resource.data.status == 'active';
      allow list: if isGettingPublicData();
      allow create: if isAuthorOf(request.resource.data);
      allow update, delete: if isAuthorOf(resource.data);
    }
    
    match /events/{eventId} {
      allow get: if resource.data.status == 'active';
      allow list: if isGettingPublicData();
      allow create: if isAuthorOf(request.resource.data);
      allow delete: if isAuthorOf(resource.data);
      allow update: if (isAuthorOf(resource.data)) || 
                     (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps']));
    }
    
    match /offers/{offerId} {
      allow get: if resource.data.status == 'active';
      allow list: if isGettingPublicData();
      allow create: if isAuthorOf(request.resource.data);
      allow update, delete: if isAuthorOf(resource.data);
    }
    
    match /promoPages/{promoPageId} {
      allow get: if resource.data.status == 'active';
      allow list: if isGettingPublicData();
      allow create: if isAuthorOf(request.resource.data);
      allow update, delete: if isAuthorOf(resource.data);
    }
    
    // =============================================
    // Posts (Status Feed) Collection Rules
    // =============================================
    match /posts/{postId} {
      allow list: if request.query.get("privacy") == "public";
      allow get: if resource.data.privacy == 'public' || 
                    (resource.data.privacy == 'followers' && (isOwner(resource.data.authorId) || isFollower(resource.data.authorId))) ||
                    (resource.data.privacy == 'me' && isOwner(resource.data.authorId));

      allow create: if isOwner(request.resource.data.authorId);
      allow delete: if isOwner(resource.data.authorId);
      
      allow update: if isAuthenticated() &&
                       (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy', 'likes']));
    }
    
    // =============================================
    // Private Collections Rules
    // =============================================
    
    match /notifications/{notificationId} {
      allow read, write: if isOwner(resource.data.userId);
    }
    
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));
      allow create: if isAuthenticated() && isOwner(request.resource.data.bookerId);
      allow delete: if isAuthenticated() && (isOwner(resource.data.ownerId) || isOwner(resource.data.bookerId));
    }
  }
}
